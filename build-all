#!/usr/bin/python3
import sys, os
import requests

# A script to build Iris' reverse-dependencies (the one that usually get built every night against Iris master)
# against a branch of your choice.
# Set the GITLAB_TOKEN environment variable to a GitLab access token.
# Set at least one of IRIS_REV or STDPP_REV to control which branches of these projects to build against
# (default to default git branch). IRIS_REPO and STDPP_REPO can be used to take branches from forks.
# Setting IRIS to "user:branch" will use the given branch on that user's fork of Iris, and similar for STDPP.

# Pre-processing: we support setting `PROJECT` to `user:branch` (GitLab MR syntax),
# which will set `PROJECT_REPO` and `PROJECT_REV` automatically.
def preprocess_repo_rev(var, project):
    if var in os.environ:
        (repo, rev) = os.environ[var].split(':')
        os.environ[var+"_REPO"] = repo + "/" + project
        os.environ[var+"_REV"] = rev
preprocess_repo_rev('STDPP', 'stdpp')
preprocess_repo_rev('IRIS', 'iris')
preprocess_repo_rev('ORC11', 'orc11')
preprocess_repo_rev('GPFSL', 'gpfsl')

# Check if everything is set
if not "GITLAB_TOKEN" in os.environ:
    print("You need to set the GITLAB_TOKEN environment variable to a GitLab access token.")
    print("You can create such tokens at <https://gitlab.mpi-sws.org/profile/personal_access_tokens>.")
    print("Make sure you grant access to the 'api' scope.")
    sys.exit(1)
if not "IRIS_REV" in os.environ:
    print("Please set IRIS_REV, STDPP_REV, ORC11_REV and GPFSL_REV environment variables to the branch/tag/commit of the respective project that you want to use.")
    print("Only IRIS_REV is mandatory, the rest defaults to the default git branch.")
    sys.exit(1)

GITLAB_TOKEN = os.environ["GITLAB_TOKEN"]
VARS = ['STDPP_REPO', 'STDPP_REV', 'IRIS_REPO', 'IRIS_REV', 'ORC11_REPO', 'ORC11_REV', 'GPFSL_REPO', 'GPFSL_REV']
PROJECTS = [
    { 'name': 'lambda-rust', 'branch': 'master' },
    { 'name': 'lambda-rust', 'branch': 'masters/weak_mem' }, # covers GPFSL and ORC11
    { 'name': 'examples', 'branch': 'master' },
    { 'name': 'iron', 'branch': 'master' },
    { 'name': 'reloc', 'branch': 'master' },
    { 'name': 'spygame', 'branch': 'master' },
    { 'name': 'time-credits', 'branch': 'master' },
    { 'name': 'actris', 'branch': 'master' },
    { 'name': 'tutorial-popl20', 'branch': 'master' },
    { 'name': 'tutorial-popl21', 'branch': 'master' },
]

filter = sys.argv[1] if len(sys.argv) > 1 else ''
for project in PROJECTS:
    name_branch = project['name'] + ('' if project['branch'] == 'master' else ':'+project['branch'])
    if filter in name_branch:
        print("Triggering build for {}...".format(name_branch))
        id = str(project['id']) if 'id' in project else "iris%2F{}".format(project['name'])
        url = "https://gitlab.mpi-sws.org/api/v4/projects/{}/pipeline".format(id)
        json = {
            'ref': project['branch'],
            'variables': [{ 'key': var, 'value': os.environ[var] } for var in VARS if var in os.environ],
        }
        r = requests.post(url, headers={'PRIVATE-TOKEN': GITLAB_TOKEN}, json=json)
        r.raise_for_status()
        print("    Pipeline running at {}".format(r.json()['web_url']))
